steps:
  - name: "Cleanup /cache mount"
    command:
      - rm -rf /cache/*
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "busybox"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache

  - wait

  - name: "Clone IRI"
    command:
      - |
        apk add git openssh
        git clone git@github.com:GalRogozinski/iri-private.git /cache/iri
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "alpine"
        shell: /bin/sh -c
        mount-buildkite-agent: true
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache
          - /conf/ssh/:/root/.ssh

  - name: "Clone TIAB"
    command:
      - clone --depth 1 https://github.com/sadjy/tiab.git /cache/tiab
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "alpine/git"
        shell: false
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache

  - wait

  - name: "Checkout IRI revision"
    command:
      - apk add git
      - cd /cache/iri
      - git checkout $IRI_GIT_COMMIT
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache

  - name: "Install TIAB dependencies"
    command:
      - pip install --force-reinstall virtualenv
      - cd /cache/tiab
      - virtualenv venv
      - source venv/bin/activate
      - pip install -r requirements.txt
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache

  - name: "Install iri-regression dependencies" 
    command:  
      - apt update && apt install -y build-essential libffi-dev libssl-dev libzmq5-dev
      - pip install --force-reinstall virtualenv  
      - virtualenv /cache/iri-regression-venv 
      - source /cache/iri-regression-venv/bin/activate  
      - cd /cache/iri/python-regression 
      - pip install -e .  
    agents: 
      queue: ops  
    plugins:  
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0: 
        image: "python:3"
        shell: /bin/bash -c
        mounts: 
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache  

  - wait

  - name: "Run TIAB against config.yml files"
    command:
      - cd /cache/tiab
      - source venv/bin/activate
      - cd /cache/iri/python-regression
      - docker login -u=\$DOCKER_USERNAME -p=\$DOCKER_PASSWORD
      - |
        ERROR=0
        for machine_dir in tests/features/machine?; do
          mkdir -p /cache/\$machine_dir/
          python /cache/tiab/create_cluster.py -i ${IRI_IMAGE:-iotaledger/iri-dev} -t $BUILDKITE_BUILD_ID -c \$machine_dir/config.yml -o /cache/\$machine_dir/output.yml -k /conf/kube/kube.config -n buildkite -x /cache/iri/python-regression -e "apt update && apt install unzip && wget http://search.maven.org/remotecontent\?filepath\=org/jacoco/jacoco/0.8.4/jacoco-0.8.4.zip -O jacoco.zip && mkdir /opt/jacoco && unzip jacoco.zip -d /opt/jacoco" -d
          if [ \$? -ne 0 ]; then
            ERROR=1
            python /workdir/iri-regression-tests/print-logs.py /cache/\$machine_dir/output.yml
          fi
          if [ \$ERROR -ne 0 ]; then
            exit 1
          fi
        done
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache
          - /conf:/conf:ro
        environment:
        - DOCKER_USERNAME
        - DOCKER_PASSWORD          

  - wait

  - name: "Generate dynamic Aloe steps"
    command: 
      - pwd && ls -al
      - cd ci-pipelines/$BUILDKITE_PIPELINE_SLUG && ./aloe-steps-create.sh | tee /cache/aloe-steps.yml
      - buildkite-agent pipeline upload < /cache/aloe-steps.yml
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "busybox"
        shell: /bin/sh -c
        mount-buildkite-agent: true
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache
          - /etc/ssl/certs:/etc/ssl/certs:ro

  - wait: ~
    continue_on_failure: true

  - name: "Fetching logs"
    command:
      - wget --quiet https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl -O /cache/kubectl && chmod +x /cache/kubectl
      - |
        for pod in \$(/cache/kubectl --kubeconfig=/conf/kube/kube.config --namespace=buildkite get pods -o jsonpath='{.items[*].metadata.name}'); do
          if [[ \$(/cache/kubectl --kubeconfig=/conf/kube/kube.config --namespace=buildkite get pod \$pod -o jsonpath='{.metadata.labels.tag}') == $BUILDKITE_BUILD_ID ]]
          then
            echo \$pod
            /cache/kubectl --kubeconfig=/conf/kube/kube.config --namespace=buildkite logs \$pod > /workdir/\$(/cache/kubectl --kubeconfig=/conf/kube/kube.config --namespace=buildkite get pod \$pod -o jsonpath='{.metadata.labels.nodenum}').log
          fi
        done
      - pwd
      - ls -al /cache
      - ls -al /workdir
      - |
        for f in /workdir/*.log
        do
          echo \$f
          grep -i "error" \$f | tee \$f.errors
          if [ -s \$f.errors ];
          then
              exit -1
          fi
        done
    agents:
      queue: ops
    artifact_paths:
      - "*.log"
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "iotacafe/iri-build-env:oracle8u171-1-maven3.5.3-1"
        shell: /bin/bash -c
        mount-buildkite-agent: false
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache
          - /conf:/conf:ro

  - wait: ~
    continue_on_failure: true

  - name: "Teardown cluster"
    command:
      - cd /cache/tiab
      - source venv/bin/activate
      - if [ -z "$KEEP_CLUSTER" ]; then python teardown_cluster.py -t $BUILDKITE_BUILD_ID -k /conf/kube/kube.config -n buildkite; fi
    agents:
      queue: ops
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests-$BUILDKITE_BUILD_ID:/cache
          - /conf:/conf:ro


