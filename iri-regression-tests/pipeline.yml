steps:
  - name: "Cleanup /cache mount"
    command:
      - ls -lR
      - rm -rf /cache/*
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "busybox"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - wait
  - name: "Checkout TIAB"
    command:
      - clone --depth 1 https://github.com/iotaledger/tiab.git /cache/tiab
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "alpine/git"
        shell: false
        mounts:
          - /cache-iri-regression-tests:/cache
  - wait
  - name: "Install TIAB dependencies"
    command:
      - pip install virtualenv
      - cd /cache/tiab
      - virtualenv venv
      - source venv/bin/activate
      - pip install -r requirements.txt
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - name: "Install iri-regression dependencies"
    command:
      - apk add gcc musl-dev libffi-dev openssl-dev
      - pip install virtualenv
      - virtualenv /cache/iri-regression-venv
      - source /cache/iri-regression-venv/bin/activate
      - cd PythonRegression
      - pip install -e .
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - wait
  - name: "Run TIAB against config.yml files"
    command:
      - cd /cache/tiab
      - source venv/bin/activate
      - cd /workdir/PythonRegression
      - |
        ERROR=0
        for machine_dir in tests/features/machine?; do
          mkdir -p /cache/\$machine_dir/
          python /cache/tiab/create_cluster.py -i iotacafe/iri-dev:$IRI_BUILD_NUMBER -t $BUILDKITE_BUILD_ID -c \$machine_dir/config.yml -o /cache/\$machine_dir/output.yml -k /conf/kube/kube.config -d
          if [ \$? -ne 0 ]; then
            ERROR=1
            python <<EOF
              import yaml
              for (key,value) in yaml.load(open('\$machine_dir/output.yml'))['nodes'].iteritems():
                if value['status'] == 'Error':
                  print value['log']
        EOF
          fi
        done
        if [ \$ERROR -ne 0 ]; then
          exit 1
        fi
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
          - /conf:/conf:ro
  - wait
  - name: "Run Aloe for tests/features/machine1"
    command:
      - source /cache/iri-regression-venv/bin/activate
      - cd PythonRegression
      - |
        for machine_dir in tests/features/machine?; do
          cp -v /cache/\$machine_dir/output.yml \$machine_dir/
        done
      - |
        find tests/features/machine1 -type f -name "*.feature" -exec basename {} \; >/cache/machine1.features
        FEATURES=\$(tr "\n" " " </cache/machine1.features)
        aloe \$FEATURES -v --nologcapture --where tests/features/machine1
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - name: "Run Aloe for tests/features/machine2"
    command:
      - source /cache/iri-regression-venv/bin/activate
      - cd PythonRegression
      - |
        for machine_dir in tests/features/machine?; do
          cp -v /cache/\$machine_dir/output.yml \$machine_dir/
        done
      - |
        find tests/features/machine2 -type f -name "*.feature" -exec basename {} \; >/cache/machine2.features
        FEATURES=\$(tr "\n" " " </cache/machine2.features)
        aloe \$FEATURES -v --nologcapture --where tests/features/machine2
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - name: "Run Aloe for tests/features/machine3"
    command:
      - source /cache/iri-regression-venv/bin/activate
      - cd PythonRegression
      - |
        for machine_dir in tests/features/machine?; do
          cp -v /cache/\$machine_dir/output.yml \$machine_dir/
        done
      - |
        find tests/features/machine3 -type f -name "*.feature" -exec basename {} \; >/cache/machine3.features
        FEATURES=\$(tr "\n" " " </cache/machine3.features)
        aloe \$FEATURES -v --nologcapture --where tests/features/machine3
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
  - wait: ~
    continue_on_failure: true
  - name: "Teardown cluster"
    command:
      - cd /cache/tiab
      - source venv/bin/activate
      - python teardown_cluster.py -t $BUILDKITE_BUILD_ID -k /conf/kube/kube.config
    agents:
      queue: ops
    plugins:
      docker#v1.4.0:
        image: "python:2-alpine"
        shell: /bin/sh -c
        mounts:
          - /cache-iri-regression-tests:/cache
          - /conf:/conf:ro
