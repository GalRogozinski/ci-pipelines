steps:
  - name: api-build-and-deploy-staging
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd api 
      - jq -r '.provider = \$provider' --arg provider \$IRI_NODE src/data/config.template.json > src/data/config.staging.json
      - jq -r '.mwm = \$mwm' --argjson mwm '9' src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.dynamoDbConnection .region = \$region' --arg region 'eu-central-1' src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.dynamoDbConnection .accessKeyId = \$accessKeyId' --arg accessKeyId \$CERT_STAGING_AWS_ACCESS_KEY_ID src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.dynamoDbConnection .secretAccessKey = \$secretAccessKey' --arg secretAccessKey \$CERT_STAGING_AWS_SECRET_ACCESS_KEY src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.dynamoDbConnection .dbTablePrefix = \$dbTablePrefix' --arg dbTablePrefix \$DB_TABLE_PREFIX src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.s3Connection .region = \$region' --arg region 'eu-central-1' src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.s3Connection .accessKeyId = \$accessKeyId' --arg accessKeyId \$CERT_STAGING_AWS_ACCESS_KEY_ID src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.s3Connection .secretAccessKey = \$secretAccessKey' --arg secretAccessKey \$CERT_STAGING_AWS_SECRET_ACCESS_KEY src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.s3Connection .bucketPrefix = \$bucketPrefix' --arg bucketPrefix \$BUCKET_PREFIX src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.mainBucket = \$mainBucket' --arg mainBucket \$MAIN_BUCKET src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.authenticateDomain = \$authenticateDomain' --arg authenticateDomain \$AUTH_DOMAIN src/data/config.staging.json > tmp.json && mv tmp.json src/data/config.staging.json
      - jq -r '.name = \$name' --arg name 'certification-api' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=staging --build-env CONFIG_ID=staging -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - IRI_NODE=https://altnodes.devnet.iota.org:443
          - CERT_STAGING_AWS_ACCESS_KEY_ID
          - CERT_STAGING_AWS_SECRET_ACCESS_KEY
          - DB_TABLE_PREFIX=certification-staging-
          - BUCKET_PREFIX=certification-staging-
          - MAIN_BUCKET=main
          - AUTH_DOMAIN=https://certification.iota.works
          - ALIAS=certification-api.iota.works
          - ZEIT_TOKEN
    agents:
      queue: ops

  - name: admin-build-and-deploy-staging
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd admin
      - jq -r '.apiEndpoint = \$apiEndpoint' --arg apiEndpoint \$API_ENDPOINT public/data/config.template.json > public/data/config.staging.json
      - jq -r '.tangleExplorer .transactions = \$transactions' --arg transactions 'https://devnet.thetangle.org/transaction/:transactionHash' public/data/config.staging.json > tmp.json && mv tmp.json public/data/config.staging.json
      - jq -r '.tangleExplorer .bundles = \$bundles' --arg bundles 'https://devnet.thetangle.org/bundle/:bundleHash' public/data/config.staging.json > tmp.json && mv tmp.json public/data/config.staging.json
      - jq -r '.name = \$name' --arg name 'certification-admin' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=staging --build-env CONFIG_ID=staging --build-env GITHUB_TOKEN=\$GIT_TOKEN -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - API_ENDPOINT=https://certification-api.iota.works
          - ALIAS=certification-admin.iota.works
          - ZEIT_TOKEN
          - GIT_TOKEN
    agents:
      queue: ops

  - name: client-build-and-deploy-staging
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd client
      - jq -r '.apiEndpoint = \$apiEndpoint' --arg apiEndpoint \$API_ENDPOINT public/data/config.template.json > public/data/config.staging.json
      - jq -r '.name = \$name' --arg name 'certification-client' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=staging --build-env CONFIG_ID=staging --build-env GITHUB_TOKEN=\$GIT_TOKEN -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - API_ENDPOINT=https://certification-api.iota.works
          - ALIAS=certification.iota.works
          - ZEIT_TOKEN
          - GIT_TOKEN
    agents:
      queue: ops

  - block: "Deploy LIVE"
    prompt: "Deploy this build to production?"

  - name: api-build-and-deploy-prod
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd api 
      - jq -r '.provider = \$provider' --arg provider \$IRI_NODE src/data/config.template.json > src/data/config.prod.json
      - jq -r '.dynamoDbConnection .region = \$region' --arg region 'eu-central-1' src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.dynamoDbConnection .accessKeyId = \$accessKeyId' --arg accessKeyId \$CERT_PROD_AWS_ACCESS_KEY_ID src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.dynamoDbConnection .secretAccessKey = \$secretAccessKey' --arg secretAccessKey \$CERT_PROD_AWS_SECRET_ACCESS_KEY src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.dynamoDbConnection .dbTablePrefix = \$dbTablePrefix' --arg dbTablePrefix \$DB_TABLE_PREFIX src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.s3Connection .region = \$region' --arg region 'eu-central-1' src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.s3Connection .accessKeyId = \$accessKeyId' --arg accessKeyId \$CERT_PROD_AWS_ACCESS_KEY_ID src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.s3Connection .secretAccessKey = \$secretAccessKey' --arg secretAccessKey \$CERT_PROD_AWS_SECRET_ACCESS_KEY src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.s3Connection .bucketPrefix = \$bucketPrefix' --arg bucketPrefix \$BUCKET_PREFIX src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.mainBucket = \$mainBucket' --arg mainBucket \$MAIN_BUCKET src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.authenticateDomain = \$authenticateDomain' --arg authenticateDomain \$AUTH_DOMAIN src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.draftCertificates = \$draftCertificates' --arg draftCertificates 'false' src/data/config.prod.json > tmp.json && mv tmp.json src/data/config.prod.json
      - jq -r '.name = \$name' --arg name 'certification-api' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=prod --build-env CONFIG_ID=prod -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - IRI_NODE=https://nodes.iota.cafe:443
          - CERT_PROD_AWS_ACCESS_KEY_ID
          - CERT_PROD_AWS_SECRET_ACCESS_KEY
          - DB_TABLE_PREFIX=certification-prod-
          - BUCKET_PREFIX=certification-prod-
          - MAIN_BUCKET=main
          - AUTH_DOMAIN=https://certification.iota.org
          - ALIAS=certification-api.iota.org
          - ZEIT_TOKEN
    agents:
      queue: ops

  - name: admin-build-and-deploy-prod
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd admin
      - jq -r '.apiEndpoint = \$apiEndpoint' --arg apiEndpoint \$API_ENDPOINT public/data/config.template.json > public/data/config.prod.json
#      - jq -r '.tangleExplorer .transactions = \$transactions' --arg transactions 'https://devnet.thetangle.org/transaction/:transactionHash' public/data/config.prod.json > tmp.json && mv tmp.json public/data/config.prod.json
#      - jq -r '.tangleExplorer .bundles = \$bundles' --arg bundles 'https://devnet.thetangle.org/bundles/:bundleHash' public/data/config.prod.json > tmp.json && mv tmp.json public/data/config.prod.json
      - jq -r '.name = \$name' --arg name 'certification-admin' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=prod --build-env CONFIG_ID=prod --build-env GITHUB_TOKEN=\$GIT_TOKEN -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - API_ENDPOINT=https://certification-api.iota.org
          - ALIAS=certification-admin.iota.org
          - ZEIT_TOKEN
          - GIT_TOKEN
    agents:
      queue: ops

  - name: client-build-and-deploy-prod
    command:
      - apt update && apt install jq -y
      - npm i -g --unsafe-perm now
      - cd client
      - jq -r '.apiEndpoint = \$apiEndpoint' --arg apiEndpoint \$API_ENDPOINT public/data/config.template.json > public/data/config.prod.json
      - jq -r '.name = \$name' --arg name 'certification-client' now.json > tmp.json && mv tmp.json now.json
#      - jq -r '.alias = \$alias' --arg alias \$ALIAS now.json > tmp.json && mv tmp.json now.json
      - now --token \$ZEIT_TOKEN --team iota alias $(now --regions sfo --token \$ZEIT_TOKEN --team iota deploy --docker -e CONFIG_ID=prod --build-env CONFIG_ID=prod --build-env GITHUB_TOKEN=\$GIT_TOKEN -m BK_JOB_ID=$BUILDKITE_JOB_ID) \$ALIAS 
    plugins:
      https://github.com/iotaledger/docker-buildkite-plugin#release-v2.0.0:
        image: "node:8.12-stretch"
        environment:
          - API_ENDPOINT=https://certification-api.iota.org
          - ALIAS=certification.iota.org
          - ZEIT_TOKEN
          - GIT_TOKEN
    agents:
      queue: ops